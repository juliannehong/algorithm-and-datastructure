// https://leetcode.com/problems/valid-sudoku/description/
#include <iostream>
#include <vector>
using namespace std;


bool check_sub_mat(int r, int c, const vector<vector<char>>& board){
  vector<vector<int>> shifts = {{-1,-1}, {-1,0},{-1,1},{0,-1},{0,1},{1,-1},{1,0},{1,1}};
  vector<bool> visited(9, false);
  visited[board[r][c] - '0'] = true;
  for (auto shift : shifts){
    int current = board[r+shift[0]][c+shift[1]] - '0';
    (visited[current]) ? return false : visited[current] = true;
  }
  return true;
}

bool is_valid_sudoku(vector<vector<char>>& board) {
  // validate each row
  for (int i = 0; i < 9; ++i){
    vector<bool> visited(9, false);
    for (int j = 0; j < 9; ++j){
      if (board[i][j] != "."){
        int current = board[i][j] - '0' - 1;
        (visited[current]) ? return false : visited[current] = true;
      }
    }
  }

  // validate each column
  for (int i = 0; i < 9; ++i){
    vector<bool> visited(9, false);
    for (int j = 0; j < 9; ++j){
      if (board[j][i] != "."){
        int current = board[i][j] - '0' - 1;
        (visited[current]) ? return false : visited[current] = true;
      }
    }
  }

  // validate 3x3
  for (int i = 1; i < 4; ++i){
    int current_r = 3*i - 2;
    for (int j = 1; j < 4; ++j){
      int current_c = 3*j - 2;
      if (!check_sub_mat(current_r, current_c, board))
        return false;
    }
  }
  return true;
}